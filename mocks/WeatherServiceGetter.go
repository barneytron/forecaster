// Code generated by mockery v2.50.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// WeatherServiceGetter is an autogenerated mock type for the WeatherServiceGetter type
type WeatherServiceGetter struct {
	mock.Mock
}

// GetForecast provides a mock function with given fields: gridForecastUrl
func (_m *WeatherServiceGetter) GetForecast(gridForecastUrl string) (string, float64, error) {
	ret := _m.Called(gridForecastUrl)

	if len(ret) == 0 {
		panic("no return value specified for GetForecast")
	}

	var r0 string
	var r1 float64
	var r2 error
	if rf, ok := ret.Get(0).(func(string) (string, float64, error)); ok {
		return rf(gridForecastUrl)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(gridForecastUrl)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) float64); ok {
		r1 = rf(gridForecastUrl)
	} else {
		r1 = ret.Get(1).(float64)
	}

	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(gridForecastUrl)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetGridForecastUrl provides a mock function with given fields: latitude, longitude
func (_m *WeatherServiceGetter) GetGridForecastUrl(latitude float64, longitude float64) (string, error) {
	ret := _m.Called(latitude, longitude)

	if len(ret) == 0 {
		panic("no return value specified for GetGridForecastUrl")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(float64, float64) (string, error)); ok {
		return rf(latitude, longitude)
	}
	if rf, ok := ret.Get(0).(func(float64, float64) string); ok {
		r0 = rf(latitude, longitude)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(float64, float64) error); ok {
		r1 = rf(latitude, longitude)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewWeatherServiceGetter creates a new instance of WeatherServiceGetter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewWeatherServiceGetter(t interface {
	mock.TestingT
	Cleanup(func())
}) *WeatherServiceGetter {
	mock := &WeatherServiceGetter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
